#!/bin/bash

# causes the shell to exit if any subcommand or pipeline returns a non-zero status
set -eu

# YunoHost app helpers
source /usr/share/yunohost/helpers

# Retrieve install arguments
app=$YNH_APP_INSTANCE_NAME
admin=$YNH_APP_ARG_ADMIN
arch=$YNH_APP_ARG_ARCH

# Application specific variables
dbname=$app
dbuser=$app
dbpass=$(ynh_string_random 16)
app_root="/home/yunohost.app/$app"
server_root="${app_root}/server"

##
## Beginning checks
## 

# Helps keep removal script simpler and more accurate by removing
#  the need for checks in BOTH install and remove scripts
ynh_app_setting_set $app chk_fail 0

# TODO: check if teamspeak is already running
# TODO: Domain/path

# YunoHost admin user
ynh_user_exists $admin \
  || ynh_die "The chosen admin user does not exist."
  
# System account user
ynh_system_user_exists $app \
  && ynh_die "$app system user account already exists. You should safely remove the user account before installing this app."
  
# MySQL
# TODO: check if user exists (to prevent deletion in remove script)
ynh_mysql_execute_as_root '' $dbname > /dev/null 2>&1 \
  && ynh_die "SQL database already exists. You should safely delete it before installing this app."

# Remove checks setting as it's unecessary - setup should run perfectly
ynh_app_setting_delete $app chk_fail

##
## Beginning setup
##
  
# Admin user
ynh_app_setting_set $app admin $admin

# System account user
sudo useradd -c "$app system account" -d "$server_root" --system --user-group $app \
  || ynh_die "Unable to create $app system account."
  
# Server root directory (must set ownership before extraction)
sudo mkdir -p "$server_root"
sudo chown -R $app: "$server_root"
ynh_app_setting_set $app server_root "$server_root"

# MySQL
ynh_mysql_create_db $dbname $dbuser $dbpass
ynh_app_setting_set $app mysqlpwd $dbpass

# Add firewall rules
sudo yunohost firewall allow UDP 9987
sudo yunohost firewall allow TCP 10011
sudo yunohost firewall allow TCP 30033

##
## Installation and Ownership/Permissions
##

# Copy source file to server root
if [ "$arch" = "64" ];
then
  arch=amd64
fi

if [ "$arch" = "32" ];
then
  arch=x86
fi

sudo cp -a ../source/$arch/. $ts3_path

# Write values to config templates
sed -i "s@DBUSER@$dbuser@g" ../config/ts3db_mariadb.ini
sed -i "s@DBPW@$dbpass@g" ../config/ts3db_mariadb.ini
sed -i "s@APP@$app@g" ../config/ts3db_mariadb.ini
sed -i "s@TS_USER@$dbuser@g" ../config/ts3server.service
sed -i "s@SERVER_ROOT@$server_root@g" ../config/ts3server.service
sudo cp ../config/ts3db_mariadb.ini "${server_root}/ts3db_mariadb.ini"
sudo cp ../config/ts3server.ini "${server_root}/ts3server.ini"

# Copy service file to respective location
# TODO: replace with init.d script
sudo cp ../config/ts3server.service /lib/systemd/system/${app}.service
sudo systemctl daemon-reload

# Finalize ownerships and permissions
sudo chown -R $app: "$app_root"
sudo chmod 750 "$app_root"
sudo find ${app_root}/ -type d -print0 | sudo xargs -0 chmod 750
sudo find ${app_root}/ -type f -print0 | sudo xargs -0 chmod 640
sudo find ${app_root}/ -type f -name "*.sh" -print0 -o -name "ts3server" -print0 | sudo xargs -0 chmod 750

##
## Finishing touches
##

# Install required lib libmariadb2
cd /tmp/

if [ "$arch" = "64" ];
then
  arch=amd64
fi

if [ "$arch" = "32" ];
then
  arch=x86
fi

sudo wget http://ftp.de.debian.org/debian/pool/main/m/mariadb-client-lgpl/libmariadb2_2.0.0-1_$arch.deb
sudo dpkg -i libmariadb2_2.0.0-1_$arch.deb
sudo rm libmariadb2_2.0.0-1_$arch.deb

# Enable and start service
sudo systemctl enable ${app}.service
sudo yunohost service add $app
sudo yunohost service start $app

# Let's use the initial log file to get the admin token
# Wait for generation of file
sleep 5
sudo cat "${server_root}/logs/ts3server_1.log" | sed -n -e 's/.*token=/Server Admin Token: /p'